diff --git a/audio_ntt.py b/../../../../byol-a/byol_a/models.py
index 1a9b411..d4ca0d6 100644
--- a/audio_ntt.py
+++ b/../../../../byol-a/byol_a/models.py
@@ -1,12 +1,17 @@
-import logging
-import re
+"""Model definitions.
 
-from pathlib import Path
+Reference:
+    Y. Koizumi, D. Takeuchi, Y. Ohishi, N. Harada, and K. Kashino, “The NTT DCASE2020 challenge task 6 system:
+    Automated audio captioning with keywords and sentence length estimation,” DCASE2020 Challenge, Tech. Rep., 2020.
+    https://arxiv.org/abs/2007.00225
+"""
 
+import re
+import logging
+from pathlib import Path
 import torch
-import torch.nn as nn
-
-from torch import Tensor
+from torch import nn
+import torch.nn.functional as F
 
 
 class NetworkCommonMixIn():
@@ -22,8 +27,7 @@ class NetworkCommonMixIn():
         weights = {}
         for k in state_dict:
             m = re.search(r'(^fc\.|\.fc\.|^features\.|\.features\.)', k)
-            if m is None:
-                continue
+            if m is None: continue
             new_k = k[m.start():]
             new_k = new_k[1:] if new_k[0] == '.' else new_k
             weights[new_k] = state_dict[k]
@@ -35,12 +39,13 @@ class NetworkCommonMixIn():
 
     def set_trainable(self, trainable=False):
         for p in self.parameters():
-            if p.requires_grad:
-                p.requires_grad = trainable
+            p.requires_grad = trainable
+
 
 
 class AudioNTT2020Task6(nn.Module, NetworkCommonMixIn):
     """DCASE2020 Task6 NTT Solution Audio Embedding Network."""
+
     def __init__(self, n_mels, d):
         super().__init__()
         self.features = nn.Sequential(
@@ -58,6 +63,7 @@ class AudioNTT2020Task6(nn.Module, NetworkCommonMixIn):
             nn.BatchNorm2d(64),
             nn.ReLU(),
             nn.MaxPool2d(2, stride=2),
+            
         )
         self.fc = nn.Sequential(
             nn.Linear(64 * (n_mels // (2**3)), d),
@@ -69,17 +75,16 @@ class AudioNTT2020Task6(nn.Module, NetworkCommonMixIn):
         self.d = d
 
     def forward(self, x):
-        x = self.features(x)       # (batch, ch, mel, time)
-        x = x.permute(0, 3, 2, 1)  # (batch, time, mel, ch)
+        x = self.features(x)       # (batch, ch, mel, time)       
+        x = x.permute(0, 3, 2, 1) # (batch, time, mel, ch)
         B, T, D, C = x.shape
-        x = x.reshape((B, T, C * D))  # (batch, time, mel*ch)
+        x = x.reshape((B, T, C*D)) # (batch, time, mel*ch)
         x = self.fc(x)
         return x
 
 
 class AudioNTT2020(AudioNTT2020Task6):
     """BYOL-A General Purpose Representation Network.
-
     This is an extension of the DCASE 2020 Task 6 NTT Solution Audio Embedding Network.
     """
 
@@ -88,8 +93,9 @@ class AudioNTT2020(AudioNTT2020Task6):
 
     def forward(self, x):
         x = super().forward(x)
-
-        x = x.mean(1) + x.amax(1)
-
+        (x1, _) = torch.max(x, dim=1)
+        x2 = torch.mean(x, dim=1)
+        x = x1 + x2
         assert x.shape[1] == self.d and x.ndim == 2
         return x
+
